name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  RUSTFLAGS: -C target-cpu=native
  CARGO_INCREMENTAL: "0"
  RUST_CRATE: sec_o3

jobs:
  changes:
    name: Detect path changes
    if: ${{ github.event_name != 'push' || github.ref_name != 'main' }}
    runs-on: ubuntu-latest
    outputs:
      rust_changed: ${{ steps.filter.outputs.rust }}
      python_changed: ${{ steps.filter.outputs.python }}
      config_changed: ${{ steps.filter.outputs.config }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            rust:
              - 'crates/sec_o3/**'
              - '**/*.rs'
            python:
              - 'pyproject.toml'
              - 'sec_nlp/**'
              - '**/*.py'
              - 'uv.lock'
            config:
              - 'Makefile'
              - '.github/**'
              - '.pre-commit-config.yaml'

  # ---------------------------------------------------------------------------
  # FULL SUITES
  # ---------------------------------------------------------------------------
  full_rust:
    name: "Rust (Full) — ${{ matrix.os }}"
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, llvm-tools-preview

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.RUST_CRATE }} -> target
          cache-all-crates: true

      - name: Build (release)
        run: make build-rs

      - name: Lint
        run: make rs-lint

      - name: Test (release)
        run: cargo test --release -p ${{ env.RUST_CRATE }} --all-features -- --nocapture

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Coverage (lcov)
        run: cargo llvm-cov -p ${{ env.RUST_CRATE }} --all-features --lcov --output-path lcov.info

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          flags: rust,${{ matrix.os }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  full_python:
    name: "Python (Full) — ${{ matrix.os }} / py${{ matrix.python }}"
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11", "3.12", "3.13"]
        include:
          - python: "3.11"
            experimental: false
          - python: "3.12"
            experimental: true
          - python: "3.13"
            experimental: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - uses: dtolnay/rust-toolchain@stable

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Setup environment
        run: make sync

      - name: Lint
        run: make py-lint

      - name: Type check
        run: make types

      - name: Build extension
        run: make build-ext

      - name: Test
        run: make test

      - name: Coverage
        run: |
          uv run coverage run -m pytest -q --basetemp .pytest_tmp --cache-clear
          uv run coverage xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: python,${{ matrix.os }},py${{ matrix.python }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ---------------------------------------------------------------------------
  # TARGETED JOBS
  # ---------------------------------------------------------------------------
  rust_targeted:
    name: "Rust (Quick) — ${{ matrix.os }}"
    needs: changes
    if: ${{ (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name != 'main')) && needs.changes.outputs.rust_changed == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.RUST_CRATE }} -> target

      - name: Lint
        run: make rs-lint

      - name: Test
        run: make test-rs

  python_targeted:
    name: "Python (Quick) — ${{ matrix.os }} / py${{ matrix.python }}"
    needs: changes
    if: ${{ (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name != 'main')) && needs.changes.outputs.python_changed == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - uses: dtolnay/rust-toolchain@stable

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Setup and lint
        run: make check

      - name: Build extension
        run: make build-ext

      - name: Test
        run: make test-py

  # ---------------------------------------------------------------------------
  # PRE-COMMIT
  # ---------------------------------------------------------------------------
  pre_commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: dtolnay/rust-toolchain@stable

      - uses: astral-sh/setup-uv@v3

      - name: Setup tools
        run: make setup

      - uses: pre-commit/action@v3.0.1

  # ---------------------------------------------------------------------------
  # INTEGRATION TESTS
  # ---------------------------------------------------------------------------
  integration:
    name: "Integration — ${{ matrix.os }} / py${{ matrix.python }}"
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ["3.11"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - uses: dtolnay/rust-toolchain@stable

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Setup environment
        run: make sync

      - name: Build extension
        run: make build-ext

      - name: Run integration tests
        run: uv run pytest -v tests/integration

  # ---------------------------------------------------------------------------
  # STATUS CHECK (required for branch protection)
  # ---------------------------------------------------------------------------
  ci_success:
    name: CI Success
    if: always()
    needs:
      - changes
      - full_rust
      - full_python
      - rust_targeted
      - python_targeted
      - pre_commit
      - integration
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "One or more jobs were cancelled"
            exit 1
          else
            echo "All jobs passed"
            exit 0
          fi
