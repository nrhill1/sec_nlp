name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  RUSTFLAGS: -C target-cpu=native
  CARGO_INCREMENTAL: "0"

jobs:
  # ---------------------------------------------------------------------------
  # Detect path changes (to only run relevant tests)
  # ---------------------------------------------------------------------------
  changes:
    name: Detect path changes
    if: ${{ github.event_name != 'push' || github.ref_name != 'main' }}
    runs-on: ubuntu-latest
    outputs:
      rust_changed: ${{ steps.filter.outputs.rust }}
      python_changed: ${{ steps.filter.outputs.python }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            rust:
              - 'edga_rs/**'
              - '**/*.rs'
              - 'edga_rs/Cargo.toml'
              - 'edga_rs/Cargo.lock'
            python:
              - 'pyproject.toml'
              - 'src/**'
              - '**/*.py'
              - 'uv.lock'
              - 'Makefile'

  # ---------------------------------------------------------------------------
  # FULL SUITES on push to main
  # ---------------------------------------------------------------------------
  full_rust:
    name: "(FULL) Rust — ${{ matrix.os }}"
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - uses: dtolnay/rust-toolchain@stable

      - name: Add Rust components
        run: rustup component add rustfmt clippy llvm-tools-preview

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            edga_rs -> target
          cache-all-crates: true

      - name: Build
        run: cargo build --release
        working-directory: edga_rs

      - name: Format check
        run: cargo fmt --all -- --check
        working-directory: edga_rs

      - name: Clippy (deny warnings)
        run: cargo clippy --all-features -- -D warnings
        working-directory: edga_rs

      - name: Test
        run: cargo test --release --all-features -- --quiet
        working-directory: edga_rs

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Coverage (lcov)
        run: cargo llvm-cov --workspace --all-features --lcov --output-path ../../lcov.info
        working-directory: edga_rs

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          flags: rust
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  full_python:
    name: "(FULL) Python — ${{ matrix.os }} / py${{ matrix.python }}"
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11.3", "3.11", "3.12", "3.13"]
        include:
          - python: "3.11.3"
            experimental: false
          - python: "3.11"
            experimental: true
          - python: "3.12"
            experimental: true
          - python: "3.13"
            experimental: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        id: setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Skip 3.11 latest if equals 3.11.3
        id: skip311
        if: matrix.python == '3.11'
        shell: bash
        run: |
          resolved="${{ steps.setup.outputs.python-version }}"
          if [[ "$resolved" == "3.11.3" ]]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "::notice title=Skipping 3.11 latest::Resolved to 3.11.3"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: astral-sh/setup-uv@v3
        if: steps.skip311.outputs.skip != 'true'

      - name: Sync deps
        if: steps.skip311.outputs.skip != 'true'
        run: uv sync --all-extras --dev

      - name: Ruff lint
        if: steps.skip311.outputs.skip != 'true'
        run: uv run ruff check .

      - name: Ruff format check
        if: steps.skip311.outputs.skip != 'true'
        run: uv run ruff format --check .

      - name: Mypy
        if: steps.skip311.outputs.skip != 'true'
        run: uv run mypy --install-types --non-interactive

      - name: Pytest
        if: steps.skip311.outputs.skip != 'true'
        run: uv run pytest -q

      - name: Coverage (XML)
        if: steps.skip311.outputs.skip != 'true'
        run: |
          uv run coverage run -m pytest -q
          uv run coverage xml

      - name: Upload to Codecov
        if: steps.skip311.outputs.skip != 'true'
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: python,py${{ steps.setup.outputs.python-version }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ---------------------------------------------------------------------------
  # TARGETED JOBS (only changed modules)
  # ---------------------------------------------------------------------------
  rust_targeted:
    name: "(TARGETED) Rust — ${{ matrix.os }}"
    needs: changes
    if: ${{ (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name != 'main')) && needs.changes.outputs.rust_changed == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            edga_rs -> target
      - run: cargo build --release
        working-directory: edga_rs
      - run: cargo test --release --all-features -- --quiet
        working-directory: edga_rs

  python_targeted:
    name: "(TARGETED) Python — ${{ matrix.os }} / py${{ matrix.python }}"
    needs: changes
    if: ${{ (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name != 'main')) && needs.changes.outputs.python_changed == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11.3", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: astral-sh/setup-uv@v3
      - run: uv sync --all-extras --dev
      - run: uv run pytest -q

  # ---------------------------------------------------------------------------
  # INTEGRATION TESTS (always run on push)
  # ---------------------------------------------------------------------------
  integration:
    name: Integration Tests — ${{ matrix.os }} / py${{ matrix.python }}
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11.3"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: astral-sh/setup-uv@v3
      - run: uv sync --all-extras --dev
      - name: Run integration tests
        run: |
          uv run pytest -q tests/integration
