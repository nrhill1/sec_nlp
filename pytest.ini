# pytest.ini

[pytest]
# Test discovery
testpaths = sec_nlp/tests
python_files = test_*.py
python_functions = test_*
python_classes = Test*

# Python path
pythonpath = .

# Output options
addopts =
    -v
    --tb=short
    --strict-markers
    --import-mode=importlib
    --maxfail=1
    --color=yes

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning:transformers
    ignore::FutureWarning:torch

# Markers for test organization
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    rust: marks tests requiring Rust bindings
    llm: marks tests for LLM functionality
    core: marks tests for core functionality
    config: marks tests for configuration
    cli: marks tests for CLI
    network: marks tests requiring network access (deselect with '-m "not network"')
    requires_model: marks tests requiring model downloads
    gpu: marks tests requiring GPU
    parametrize: marks parametrized tests

# Coverage options (when using --cov)
[coverage:run]
source = sec_nlp
omit =
    */tests/*
    */test_*.py
    */__init__.py
    */conftest.py
    */migrations/*
    */venv/*
    */.venv/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    @typing.overload

[coverage:html]
directory = htmlcov

# Tool-specific configuration
[tool:pytest]
# Timeout for individual tests (prevent hanging)
timeout = 300

# Console output format
console_output_style = progress

# Log format
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture settings
capture = sys

# Minimum version
minversion = 8.0

# XDist settings
# Uncomment if using pytest-xdist
# [pytest:xdist]
# workers = auto
# dist = loadscope

# Asyncio settings
# [pytest:asyncio]
# asyncio_mode = auto
