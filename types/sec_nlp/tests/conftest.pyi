from collections.abc import Callable as Callable
from collections.abc import Generator
from pathlib import Path
from typing import Any, Protocol

import pytest
from langchain_core.language_models import LLM
from langchain_core.runnables import Runnable as Runnable
from langchain_core.runnables import RunnableConfig as RunnableConfig
from pydantic import Field as Field

class HasPageContent(Protocol):
    page_content: str

def _block_network() -> Generator[None, None, None]: ...
def sandbox_env(tmp_path: Path, monkeypatch: pytest.MonkeyPatch) -> Generator[None, None, None]: ...
@pytest.fixture
def tmp_dirs(tmp_path: Path) -> tuple[Path, Path]: ...
@pytest.fixture
def make_fake_doc() -> Callable[[str], HasPageContent]: ...
@pytest.fixture
def write_html_tree(tmp_dirs: tuple[Path, Path]) -> Callable[..., Path]: ...

class FakeLLM(LLM):
    _model: object | None
    _tokenizer: object | None
    @property
    def _llm_type(self) -> str: ...
    def _call(self, prompt: str, **kwargs: Any) -> str: ...
    def _load_backend(self) -> None: ...
    def force_init(self) -> None: ...
    def invoke(self, input: str, config: RunnableConfig | None = None, **__: Any) -> str: ...

@pytest.fixture
def fake_llm() -> Callable[[bool], FakeLLM]: ...
